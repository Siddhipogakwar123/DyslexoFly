'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { downloadEnhancedDyslexoFlyPDF, generateEnhancedDyslexoFlyPDF } from '../utils/enhancedPdfGenerator'
import JSZip from 'jszip'
import { saveAs } from 'file-saver'

export default function EnhancedDownloadPackage({ fileId, textContent, summaries, audioUrl, allAudioUrls = [] }) {
  const [isOpen, setIsOpen] = useState(false)
  const [downloadProgress, setDownloadProgress] = useState(0)
  const [isDownloading, setIsDownloading] = useState(false)

  const downloadItems = [
    {
      id: 'text',
      name: 'Original Text',
      description: 'Extracted text content in readable format',
      icon: 'ðŸ“„',
      size: textContent ? `${Math.round(textContent.length / 1024)}KB` : 'N/A',
      available: !!textContent
    },
    {
      id: 'summaries',
      name: 'AI Summaries',
      description: 'All generated summaries (TL;DR, Standard, Detailed)',
      icon: 'ðŸ“‹',
      size: summaries ? `${Math.round(JSON.stringify(summaries).length / 1024)}KB` : 'N/A',
      available: !!(summaries?.tldr || summaries?.standard || summaries?.detailed)
    },
    {
      id: 'audio',
      name: 'Audio File',
      description: 'Text-to-speech audio in MP3 format',
      icon: 'ðŸŽµ',
      size: 'Variable',
      available: !!audioUrl
    },
    {
      id: 'pdf',
      name: 'Enhanced PDF',
      description: 'Professionally formatted PDF with improved branding',
      icon: 'ðŸ“„',
      size: 'Enhanced',
      available: !!(textContent || summaries)
    },
    {
      id: 'package',
      name: 'Complete Package',
      description: 'All content in a comprehensive ZIP package',
      icon: 'ðŸ“¦',
      size: 'Complete',
      available: !!(textContent || summaries || audioUrl)
    }
  ]

  const downloadText = () => {
    if (!textContent) return
    
    const blob = new Blob([textContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${fileId}_text.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const downloadSummaries = () => {
    if (!summaries) return
    
    let content = `# AI-Generated Summaries for ${fileId}\n\n`
    
    if (summaries.tldr) {
      content += `## TL;DR Summary\n${summaries.tldr}\n\n`
    }
    
    if (summaries.standard) {
      content += `## Standard Summary\n${summaries.standard}\n\n`
    }
    
    if (summaries.detailed) {
      content += `## Detailed Summary\n${summaries.detailed}\n\n`
    }
    
    content += `\n---\nGenerated by DyslexoFly - Accessible Learning Platform\n`
    content += `Â© 2025 The Kamand Krew | Making education accessible for everyone\n`
    
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${fileId}_summaries.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const downloadAudio = () => {
    if (!audioUrl) return
    
    const a = document.createElement('a')
    a.href = audioUrl
    a.download = `${fileId}_audio.mp3`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
  }

  const downloadPDF = () => {
    if (!textContent && !summaries) return
    
    try {
      downloadEnhancedDyslexoFlyPDF(fileId, textContent, summaries, audioUrl)
    } catch (error) {
      console.error('Enhanced PDF generation failed:', error)
    }
  }

  const downloadPackage = async () => {
    setIsDownloading(true)
    setDownloadProgress(0)
    
    try {
      const zip = new JSZip()
      
      // Add text content
      if (textContent) {
        setDownloadProgress(15)
        zip.file(`${fileId}_text.txt`, textContent)
      }
      
      // Add summaries
      if (summaries) {
        setDownloadProgress(30)
        let summaryContent = `# AI-Generated Summaries for ${fileId}\n\n`
        
        if (summaries.tldr) {
          summaryContent += `## TL;DR Summary\n${summaries.tldr}\n\n`
        }
        
        if (summaries.standard) {
          summaryContent += `## Standard Summary\n${summaries.standard}\n\n`
        }
        
        if (summaries.detailed) {
          summaryContent += `## Detailed Summary\n${summaries.detailed}\n\n`
        }
        
        summaryContent += `\n---\nGenerated by DyslexoFly - Accessible Learning Platform\n`
        summaryContent += `Â© 2025 The Kamand Krew | Making education accessible for everyone\n`
        zip.file(`${fileId}_summaries.txt`, summaryContent)
      }
      
      // Add Enhanced PDF
      setDownloadProgress(50)
      try {
        const pdfDoc = generateEnhancedDyslexoFlyPDF(fileId, textContent, summaries, audioUrl)
        const pdfBlob = pdfDoc.output('blob')
        zip.file(`${fileId}_DyslexoFly_Enhanced.pdf`, pdfBlob)
      } catch (pdfError) {
        console.error('Enhanced PDF generation failed:', pdfError)
      }
      
      // Add audio files
      setDownloadProgress(70)
      const audioFolder = zip.folder('audio')
      
      // Add all audio URLs
      const audioUrls = allAudioUrls.length > 0 ? allAudioUrls : (audioUrl ? [audioUrl] : [])
      
      for (let i = 0; i < audioUrls.length; i++) {
        try {
          const response = await fetch(audioUrls[i])
          if (response.ok) {
            const audioBlob = await response.blob()
            const audioName = audioUrls[i].split('/').pop() || `audio_${i + 1}.mp3`
            audioFolder.file(audioName, audioBlob)
          }
        } catch (audioError) {
          console.error(`Failed to download audio ${i + 1}:`, audioError)
        }
      }
      
      // Add Enhanced README
      setDownloadProgress(85)
      const readmeContent = `# DyslexoFly Enhanced Document Package

## Document Information
- Document: ${fileId}
- Generated: ${new Date().toLocaleString()}
- Platform: DyslexoFly - Accessible Learning Platform
- Team: The Kamand Krew (IIT Mandi)

## Package Contents:
- ${fileId}_text.txt - Original extracted text content
- ${fileId}_summaries.txt - AI-generated summaries (TL;DR, Standard, Detailed)
- ${fileId}_DyslexoFly_Enhanced.pdf - Professional formatted document with enhanced branding
- audio/ - All generated audio files in MP3 format

## How to Use This Package:
1. Extract all files from this ZIP archive
2. Use text and summary files for reference and study
3. Play audio files for listening and accessibility
4. View the enhanced PDF for professional presentation
5. Re-upload the original document to DyslexoFly for full interactive functionality

## DyslexoFly Features:
- AI-powered text summarization with multiple complexity levels
- High-quality text-to-speech in multiple languages and voices
- OpenDyslexic font support for improved readability
- WCAG AAA accessibility compliance
- Real-time document processing and conversion
- Multi-format support (PDF, DOCX, TXT, Images)
- Advanced search and highlighting capabilities
- Responsive design for all devices

## About DyslexoFly:
DyslexoFly is an innovative AI-powered educational platform designed to make learning 
accessible for students with dyslexia. Our solution transforms traditional educational 
content into dyslexia-friendly formats with intelligent summaries, high-quality 
text-to-speech, and optimized visual presentation.

## Links:
- Live Platform: https://dyslexofly.netlify.app
- GitHub Repository: https://github.com/TayalAditya/DyslexoFly
- Aditya GitHub: https://github.com/TayalAditya
- Siddhi GitHub: https://github.com/SiddhiPogakwar123

## Development Team - The Kamand Krew:
- Aditya Tayal - Full-Stack Developer & AI Integration (IIT Mandi, CSE)
- Siddhi Pogakwar - TTS Training & Text Analysis (IIT Mandi, MnC)

## License:
MIT License - Open Source

---
Generated by DyslexoFly - Accessible Learning Platform
Â© 2025 The Kamand Krew | Making education accessible for everyone
Transforming educational content for 70M+ dyslexic learners in India`

      zip.file('README.txt', readmeContent)
      
      setDownloadProgress(95)
      
      // Generate and download ZIP
      const zipBlob = await zip.generateAsync({ type: 'blob' })
      saveAs(zipBlob, `${fileId}_DyslexoFly_Enhanced_Package.zip`)
      
      setDownloadProgress(100)
      
      setTimeout(() => {
        setIsDownloading(false)
        setDownloadProgress(0)
      }, 1000)
      
    } catch (error) {
      console.error('Enhanced package download failed:', error)
      setIsDownloading(false)
      setDownloadProgress(0)
    }
  }

  const handleDownload = (itemId) => {
    switch (itemId) {
      case 'text':
        downloadText()
        break
      case 'summaries':
        downloadSummaries()
        break
      case 'audio':
        downloadAudio()
        break
      case 'pdf':
        downloadPDF()
        break
      case 'package':
        downloadPackage()
        break
    }
  }

  return (
    <>
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => setIsOpen(true)}
        className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all"
      >
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <span>Enhanced Download</span>
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
            onClick={() => setIsOpen(false)}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="bg-gradient-to-r from-purple-600 to-indigo-600 p-6 text-white">
                <div className="flex justify-between items-center">
                  <div>
                    <h2 className="text-2xl font-bold mb-2">Enhanced Download Package</h2>
                    <p className="text-purple-100">Professional downloads with improved branding</p>
                  </div>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="w-10 h-10 bg-white/20 hover:bg-white/30 rounded-full flex items-center justify-center transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Content */}
              <div className="p-6">
                {/* Download Progress */}
                <AnimatePresence>
                  {isDownloading && (
                    <motion.div
                      initial={{ opacity: 0, y: -20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className="mb-6 p-4 bg-purple-50 rounded-lg border border-purple-200"
                    >
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-purple-800">Preparing enhanced download...</span>
                        <span className="text-sm font-bold text-purple-800">{downloadProgress}%</span>
                      </div>
                      <div className="w-full h-2 bg-purple-200 rounded-full overflow-hidden">
                        <motion.div
                          className="h-full bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full"
                          initial={{ width: 0 }}
                          animate={{ width: `${downloadProgress}%` }}
                          transition={{ duration: 0.3 }}
                        />
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Download Items */}
                <div className="space-y-4">
                  {downloadItems.map((item, index) => (
                    <motion.div
                      key={item.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`p-4 rounded-lg border transition-all ${
                        item.available
                          ? 'border-gray-200 hover:border-purple-300 hover:bg-purple-50 cursor-pointer'
                          : 'border-gray-100 bg-gray-50 opacity-60'
                      }`}
                      onClick={() => item.available && !isDownloading && handleDownload(item.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{item.icon}</span>
                          <div>
                            <h3 className={`font-medium ${item.available ? 'text-gray-900' : 'text-gray-500'}`}>
                              {item.name}
                            </h3>
                            <p className={`text-sm ${item.available ? 'text-gray-600' : 'text-gray-400'}`}>
                              {item.description}
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <div className={`text-sm font-medium ${item.available ? 'text-gray-700' : 'text-gray-400'}`}>
                            {item.size}
                          </div>
                          {item.available ? (
                            <div className="text-xs text-purple-600 font-medium">Available</div>
                          ) : (
                            <div className="text-xs text-gray-400">Not available</div>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>

                {/* Info Section */}
                <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <h4 className="font-medium text-blue-900 mb-2">âœ¨ Enhanced Features</h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    <li>â€¢ Professional PDF with improved branding and logo</li>
                    <li>â€¢ Comprehensive README with detailed instructions</li>
                    <li>â€¢ Enhanced formatting and typography</li>
                    <li>â€¢ Complete package with all content organized</li>
                    <li>â€¢ Authentic platform analytics and statistics</li>
                  </ul>
                </div>

                {/* Action Buttons */}
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    onClick={() => setIsOpen(false)}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium transition-colors"
                  >
                    Close
                  </button>
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => handleDownload('package')}
                    disabled={isDownloading || !downloadItems.find(item => item.id === 'package')?.available}
                    className="px-6 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg font-medium shadow-md hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isDownloading ? 'Preparing...' : 'Download Enhanced Package'}
                  </motion.button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}